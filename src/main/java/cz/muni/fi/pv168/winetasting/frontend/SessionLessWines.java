/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pv168.winetasting.frontend;

import cz.muni.fi.pv168.winetasting.backend.Exceptions.ServiceFailureException;
import cz.muni.fi.pv168.winetasting.backend.WineSample;
import cz.muni.fi.pv168.winetasting.backend.WineSampleDAO;
import cz.muni.fi.pv168.winetasting.backend.WineTastingManager;
import cz.muni.fi.pv168.winetasting.backend.WineTastingSession;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author lukas
 */
public class SessionLessWines extends javax.swing.JFrame {

    final static org.slf4j.Logger log = LoggerFactory.getLogger(SessionLessWines.class);


    private static WineSampleDAO wineSampleDAO = CommonResources.getWineSampleDAO();
    private static WineTastingManager manager = CommonResources.getWineTastingManager();
    private SessionDependentWines context;
    private WineSampleTableModel wineSampleModel;
    private WineTastingSession wineSession;
    private int rowIndex;

    /**
     * Creates new form SessionLessWines
     */
    public SessionLessWines(SessionDependentWines context, WineTastingSession session) {
        initComponents();
        this.context = context;
        wineSession = session;
        wineSampleModel = (WineSampleTableModel) jWineTable.getModel();
        FindUnsessionedWinesWorker worker = new FindUnsessionedWinesWorker();
        worker.execute();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    private class FindUnsessionedWinesWorker extends SwingWorker<List<WineSample>, Integer> {

        @Override
        protected List<WineSample> doInBackground() throws Exception {
            return wineSampleDAO.findAllUnsessionedWines();
        }

        @Override
        protected void done() {
            try {
                log.debug("Finding all unsessioned wines");
                wineSampleModel.setWineSamples(get());
            }catch(ExecutionException ex) {
                log.error("Exception thrown while attempting to find all unsessioned wines: "+ex.getCause());
            } catch (InterruptedException ex) {
                log.error("Method doInBackground in FindUnsessionedWinesWorker was interrupted"+ex.getCause());
                throw new RuntimeException("Operation interrupted in FindUnsessionedWinesWorker");
            }
        }
    }
    
    private class AssignWinesToSessionWorker extends SwingWorker<List<WineSample>, Void> {

        @Override
        protected List<WineSample> doInBackground() throws Exception {
            log.debug("Assigning wines to session in background");
            int [] selectedRows = jWineTable.getSelectedRows();
            List<WineSample> samples = new ArrayList<>();
            if ( selectedRows.length >= 0 ) {
                for (int selectedRow : selectedRows) {
                    WineSample wineSample = wineSampleModel.getWineSample(selectedRow);
                    samples.add(wineSample);
                    try {
                        manager.assignWineToSession(wineSession, wineSample);
                    } catch (Exception ex) {
                        throw new ServiceFailureException(wineSample.toString());
                    }
                }
            }
            jWineTable.getSelectionModel().clearSelection();
            return samples;
        }

        @Override
        protected void done() {
            try {
                log.debug("Assigning wines to session");
                List<WineSample> list = get();
                WinesInSessionTableModel model = context.getWineSampleModel();
                for (WineSample wine : list) {
                    model.addWineSample(wine);
                }
                SessionLessWines.this.dispose();
            } catch (ExecutionException ex) {
                log.error("Exception thrown while attempting to assign wines to session: " + ex.getCause());
                JOptionPane.showMessageDialog(rootPane, "cannot-add-wine-to-session");
            } catch (InterruptedException ex) {
                log.error("Method doInBackground in AssignWinesToSessionWorker was interrupted"+ex.getCause());
                throw new RuntimeException("Operation interrupted.. AssignWinesToSessionWorker");
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jWineTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jWineTable.setModel(new WineSampleTableModel());
        jWineTable.setToolTipText("");
        jWineTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jWineTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jWineTable);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("texts"); // NOI18N
        jButton1.setText(bundle.getString("Add Selected")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 990, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AssignWinesToSessionWorker worker = new AssignWinesToSessionWorker();
        worker.execute();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jWineTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jWineTableMouseReleased
        if (jWineTable.getSelectedRowCount() > 0) {
            jButton1.setEnabled(true);
        }
    }//GEN-LAST:event_jWineTableMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jWineTable;
    // End of variables declaration//GEN-END:variables
}
